const getPixels = require("get-pixels");
var base64ImageToRGBMatrix = (base64, cb) => {
  const type = base64.split("data:")[1].split(";")[0];
  const img = base64.replace(/^data:image\/png;base64,/, "");
  getPixels(Buffer.from(img, 'base64'), type, (err,pixels) => {
    if(err) return console.error(err);
    result = new Array(pixels.shape[1]);
    for(let i=0;i<result.length;i++) result[i] = new Array(pixels.shape[0]);
    for (var i = 0; i < pixels.data.length; i+=pixels.shape[2]) {
      const y = Math.floor(i/pixels.shape[2]/pixels.shape[0]), x = i%(pixels.shape[2]*pixels.shape[0])/pixels.shape[2];
      result[y][x] = {
        r: pixels.data[i],
        g: pixels.data[i+1],
        b: pixels.data[i+2],
        a: pixels.data[i+3]
      }
    }
    cb(null, result)
  });
}

/*var base64ImageToRGBMatrix = function (base64, callback) {
  var img = new window.Image()
  img.onload = function onImageLoad() {
    var canvas = document.createElement('canvas')
    var ctx
    var data
    var result

    canvas.width = img.width
    canvas.height = img.height

    ctx = canvas.getContext('2d')
    ctx.drawImage(img, 0, 0)

    data = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height).data

    result = []
    for (var y = 0; y < canvas.height; y++) {
      result[y] = []
      for (var x = 0; x < canvas.width; x++) {
        result[y][x] = {
          r: data[y * canvas.width * 4 + x * 4],
          g: data[y * canvas.width * 4 + x * 4 + 1],
          b: data[y * canvas.width * 4 + x * 4 + 2],
          a: data[y * canvas.width * 4 + x * 4 + 3]
        }
      }
    }

    callback(null, result)
  }
  img.src = base64
}*/

module.exports = base64ImageToRGBMatrix
